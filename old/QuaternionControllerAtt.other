function output = QuaternionController(u,Params)
global prev Desired Integral

Desired.phi   = u(1);
Desired.theta = u(2);
Desired.psi   = u(3);

%% Testing Purposes
force.total = Params.m*Params.g;
Desired.Thrust     = force.total;
%%


x = u(1+3:17+3);
% Position
state.px = x(1);
state.py = x(2);
state.pz = x(3);
% Velocity
state.ui = x(4); 
state.vi = x(5);
state.wi = x(6);
% Quaternion Pose
state.qw = x(7);
state.qx = x(8);
state.qy = x(9);
state.qz = x(10);
% Angular Velocity
state.p = x(11);
state.q = x(12);
state.r = x(13);
% Thrust Coefficients
state.CT1 = x(14);
state.CT2 = x(15);
state.CT3 = x(16);
state.CT4 = x(17);

T = Params.K*(state.CT1 + state.CT2 + state.CT3 + state.CT4);
l = Params.K*Params.d*(state.CT1 - state.CT2 - state.CT3 + state.CT4);
m = Params.K*Params.d*(state.CT1 + state.CT2 - state.CT3 - state.CT4);
n = (Params.K*Params.R/sqrt(2))*(state.CT1^3/2 - (state.CT2^3/2) + state.CT3^3/2 - (state.CT4^3/2));

Th = [Params.K                                 Params.K                                 Params.K                                 Params.K;...
      Params.K*Params.d                       -Params.K*Params.d                       -Params.K*Params.d                        Params.K*Params.d;...
      Params.K*Params.d                        Params.K*Params.d                       -Params.K*Params.d                       -Params.K*Params.d;...
      1.5*Params.K*Params.R*sqrt(state.CT1/2) -1.5*Params.K*Params.R*sqrt(state.CT2/2)  1.5*Params.K*Params.R*sqrt(state.CT3/2) -1.5*Params.K*Params.R*sqrt(state.CT4/2)];

% Rotation of Velocity from Inertial Frame to Body FrameParams.
Velocity.interial          = [state.ui; state.vi; state.wi];
quat.scalar                =  state.qw;
quat.vector                = [state.qx; state.qy; state.qz];
quat.full                  = [quat.scalar; quat.vector];
omega.body                 = [state.p; state.q; state.r];  

%% Desired vehicle orientation in the Inertial-frame
quat.Inertial      = quat.full';
quat.unfilted.desired       = eul2quat([Desired.psi, Desired.theta, Desired.phi],'ZYX');

%% Command filtered backstepping controller step 3
quat.error = quatmultiply(quat.filtered,quatinv(quat.unfilted.desired))

omega.error = omega.body - Params.Quat2Rot(quat.error)*omega.desired

quat.xdt.error =  0.5*Params.Iota(quat.error)*omega.error

quat.xdt.filtered = 0.5*Params.Iota(quat.filtered)*omega.body

% Integral
quat.filtered.desired = quat.xdt.filtered*Params.dt + quat.filtered.desired;

omega.xdt.bar = alpha*(-k.error * h.error * (quat.error(2:3)) - omega.bar)

% Integral
omega.bar = omega.xdt.bar*Params.dt + omega.bar


%% Command filtered backstepping controller step 4
omega.unfilted.desired = -Params.k3 * Params.h * quat.error(2:4) - quat2rotm(quat.filtered)*velocity.error + Params.Quat2Rot(quat.error)*omega.bar

omega.xddt.desired = (-Params.Wn^2)*(omega.filtered - omega.unfilted.desired) - 2*Params.Eta * (-Params.Wn^2) * omega.xdt.desired

%omega.xdt.desired = (-Params.Wn^2)*(quat.filtered - quat.desired) - 2*Params.Eta * (-Params.Wn^2) * omega.body

omega.xdt.desired = omega.xddt.desired*Params.dt + omega.xdt.desired;



%% Calculate Roll, Pitch, Yaw Rates - P Q R
pqrdt = [((Params.Jy-Params.Jz)/Params.Jx)*state.q*state.r;
         ((Params.Jz-Params.Jx)/Params.Jy)*state.p*state.r;
         ((Params.Jx-Params.Jy)/Params.Jz)*state.p*state.q] + [(1/Params.Jx)*l; (1/Params.Jy)*m; (1/Params.Jz)*n];

% Desired.p = (state.p + Desired.pqrdt(2)*Params.dt);
% Desired.q = (state.q + Desired.pqrdt(3)*Params.dt);
% Desired.r = (state.r + Desired.pqrdt(4)*Params.dt);

Desired.p = 0;
Desired.q = 0;
Desired.r = 0;

%% Integrate to get feedforward jerk
%moment.body = -sign(error.quat(1))*(Params.quat.kp*error.quat(2:4)') - Params.quat.kd*(omega.body - Desired.OmegaBody);
Error.prop        = [Desired.p   - state.p;
                     Desired.q   - state.q;
                     Desired.r   - state.r];
                 
Error.dot         = [Desired.pqrdt(2) - pqrdt(1);
                     Desired.pqrdt(3) - pqrdt(2);
                     Desired.pqrdt(4) - pqrdt(3)];
                 
Integral.ErrorPQR = Integral.ErrorPQR + Error.prop*Params.dt;

pqrddt = Desired.pqrddt + Params.att.pqr.kp * Error.prop + Params.att.pqr.ki * Integral.ErrorPQR + Params.att.pqr.kd * Error.dot
output = [Desired.Thrust, pqrddt(1), pqrddt(2), pqrddt(3)];


%% Old Code

%Queternion Error in the body-frame
quat.error         = quatmultiply(quatconj(quat.Inertial), Desired.quat);

% Body-frame time derivative of quat
quat.xdt           = 0.5*quatmultiply([1 omega.body'],quat.Inertial);

% Inertial-frame time derivative of quat
Integral.QuatError = Integral.ErrorQuat + quat.error' *Params.dt;
quat.errordt = 0.5*quatmultiply(quat.inertial,quatmultply(omega.errorbody,quat.error))

% (quat.xddt - Desired.XddtQuat) + Kd*(Traj.quat.xdt - quat.xdt) + kp*(Traj.quat.inertial - quat.inertial) + ki*(quat.integral)
% quat.xddt = Desired.XddtQuat - Kd*(Traj.quat.xdt - quat.xdt) - kp*(Traj.quat.inertial - quat.inertial) - ki*(quat.integral)
% quat.xddt = Desired.XddtQuat - Kd*(0 - quat.xdt) - kp*(quat.error) - ki*(quat.integral)
%quat.xddt = Desired.XddtQuat + Params.att.Quat.kd*quat.xdt' + Params.att.Quat.kp*quat.error'  + Params.att.Quat.ki*Integral.QuatError
%quat.xddt  = quatmultiply(q,uat.xdt*Params.att.Quat.kd,quat.error*Params.att.Quat.kp)

% Calulate Desired Angular Acceleration in the Body Frame
% Body-fixed coordinates
%Desired.pqrdt = 2*quatmultiply(quat.xddt',quatconj(quat.Inertial))' + 2 *
%[quatnorm(quat.xdt)^2; 0; 0; 0]
%% New Equation
